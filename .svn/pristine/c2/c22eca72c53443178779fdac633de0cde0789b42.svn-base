<template>
  <div class="right-menu-pop" :ref="'menuChild' + index" :style="childStyle">
    <ul>
      <li v-for="(child, idx) in children" :key="idx" :class="child.disabled ? 'disabled' : ''" @mouseenter.stop="handleHover(idx)" @mouseleave.stop="handleRemoveHover"
      @click.stop="!child.hasOwnProperty('children')&&handleClick(child)">
        <span>{{ child.label }}</span>
        <i v-if="child.hasOwnProperty('children')" class="el-icon-caret-right"></i>
        <child v-if="child.hasOwnProperty('children') && (hoverIndex == idx)" :children="child.children" :data="data" :childStyle="style"></child>
      </li>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'child',
  props: ['children', 'data', 'index', 'childStyle'],
  data () {
    return {
      hoverIndex: null,
      style: {
        left: 0,
        top: 0,
        width: 'max-content'
      }
    }
  },
  methods: {
    handleHover (index) {
      if (this.hoverIndex == index) {
        this.hoverIndex = null
      } else {
        this.hoverIndex = index
        let width = this.$refs['menuChild' + this.index].offsetWidth
        this.style.left = width + 'px'
        this.style.top = 36 * index + 'px'
      }
    },
    handleRemoveHover () {
      this.hoverIndex = null
    },
    handleClick (item) {
      let method = item.method
      if (method) {
        method(this.data, item.hasOwnProperty('data') ? item.data : null)
      }
    }
  }
}
</script>
